AWSTemplateFormatVersion: 2010-09-09
Description: Creating Roles and Policies

Metadata:
  CommitHash: <<GIT_COMMIT_ID>>
  Version: <<TEMPLATE_VERSION>>
  
Parameters:
  project:
    Type: String
  account:
    Type: String
  environment:
    Type: String
  subEnvironment:
    Type: String
  assetId:
    Type: String
  deployment:
    Type: String
  EnvAbbr:
    Type: String
  RegAbbr:
    Type: String

Resources:

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn:
      - EC2Role
      - AccessToElbPolicy
      - AccessToCWPolicy
      - AccessToCWLogsPolicy
    Properties:
      Path: /service-role/
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub >-
        ${assetId}-ec2-${project}--${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}
      Path: /LaunchConfig-role/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com

  AutoScalerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub >-
        ${assetId}-as-${project}-${deployment}-${subEnvironment}
      Path: /LaunchConfig-role/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - application-autoscaling.amazonaws.com

  AccessToCWPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - EC2Role
    Properties:
      PolicyName: !Sub >-
        ${assetId}-cw-sp-${project}-${deployment}-${subEnvironment}
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - 'cloudwatch:PutMetricData'
              - 'cloudwatch:GetMetricStatistics'
      Roles:
        - !Ref EC2Role

  # This matches Amazon's CloudWatchAgentServerPolicy
  # Allows Amazon-CloudWatch-Agent (on the ads ec2) to push ads logs to CloudWatch
  # this agent is installed and running in the ads-mon Docker container
  AccessToCWLogsPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - EC2Role
    Properties:
      PolicyName: !Sub >-
        ${assetId}-cwlogs-sp-${project}-${deployment}-${subEnvironment}
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
          - Effect: Allow
            Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
            Action:
              - 'ssm:GetParameter'
      Roles:
        - !Ref EC2Role

  AccessToElbPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - EC2Role
    Properties:
      PolicyName: !Sub >-
        ${assetId}-elb-sp-${project}-${deployment}-${subEnvironment}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:Describe*'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:DescribeTargetGroups'
              - 'elasticloadbalancing:DescribeTargetHealth'
              - 'elasticloadbalancing:RegisterTargets'
      Roles:
        - !Ref EC2Role

  AutoScalerToManyPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - AutoScalerRole
    Properties:
      PolicyName: !Sub >-
        ${assetId}-as-sp-${project}-${deployment}-${subEnvironment}
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
      Roles:
        - !Ref AutoScalerRole

Outputs:
  EC2InstanceProfile:
    Description: IAM EC2InstanceProfile
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub EC2InstanceProfile
